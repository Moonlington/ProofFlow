import { ProofFlowLSPClient, ProofFlowLSPClientFileType } from '../src/ProofFlow/lspClient/ProofFlowLSPClient';
import { jest } from '@jest/globals';
const WebSocket = require('ws');

// Generated by CodiumAI

describe('waitForOpenConnection', () => {

  // resolves when WebSocket connection is open within max attempts
  it('should resolve when WebSocket connection is open within max attempts', async () => {
    const wsUrl = "ws://example.com";
    const fileType = "proofflow";
    const path = "/path/to/lsp";

    const client = new ProofFlowLSPClient(wsUrl, fileType, path);

    jest.spyOn(client['socket'], 'readyState', 'get').mockReturnValue(WebSocket.OPEN);

    await expect(client.waitForOpenConnection()).resolves.toBeUndefined();
  });

  // rejects if WebSocket connection is not open within max attempts
  it('should reject if WebSocket connection is not open within max attempts', async () => {
    const wsUrl = "ws://example.com";
    const fileType = "proofflow";
    const path = "/path/to/lsp";

    const client = new ProofFlowLSPClient(wsUrl, fileType, path);

    jest.spyOn(client['socket'], 'readyState', 'get').mockReturnValue(WebSocket.CLOSED);

    await expect(client.waitForOpenConnection()).rejects.toBeUndefined();
  });
});
